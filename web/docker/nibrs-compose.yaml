# Docker Compose file for the nibrs.search.org AWS server
# To run:  docker-compose -f nibrs-compose.yaml up -d
version: '3'

networks:
  nibrs_nw:
    driver: bridge
    ipam:
      driver: default
      config:
      -
        subnet: 172.18.0.0/16

services:

  db-analytics-nibrs:
    container_name: db-analytics-nibrs
    image: searchncjis/db-analytics-nibrs
    networks:
      nibrs_nw:

  nibrs-httpd-proxy:
    container_name: nibrs-httpd-proxy
#    image: searchncjis/nibrs-httpd-proxy
    build: ../../../nibrs-private/docker/nibrs-httpd-proxy
    restart: always
    networks:
      nibrs_nw:
    ports:
      - "443:443"
      - "80:80"
# we need this volume since this SSL cert and key must be on the docker host file system
    volumes:
      - "/opt/certs/:/opt/certs/"

  nibrs-web:
    container_name: nibrs-web
    image: searchncjis/nibrs-web
    restart: always
    networks:
      nibrs_nw:

  saiku-analytics-nibrs:
    container_name: saiku-analytics-nibrs
    image: searchncjis/saiku-analytics-nibrs
    depends_on:
      - db-analytics-nibrs
    networks:
      nibrs_nw:

  nibrs-liferay-mysql:
    container_name: nibrs-liferay-mysql
    image: ojbc/nibrs-liferay-mysql
    build: ./nibrs-liferay-mysql
    networks:
      nibrs_nw:
    ports:
      - "3307:3306"

  nibrs-liferay:
   container_name: nibrs-liferay
   image: ojbc/nibrs-liferay
   build: ./nibrs-liferay
   environment:
    - DB_TYPE=MYSQL
   links:
    - "nibrs-liferay-mysql:db_lep"
   depends_on:
    - nibrs-liferay-mysql
   networks:
    nibrs_nw:
   ports:
    - "8080:8080"

  nibrs-idp:
   container_name: idp
   image: ojbc/nibrs-idp
   build: ../../../nibrs-private/docker/nibrs-idp
   depends_on:
    - nibrs-liferay-mysql
   networks:
    nibrs_nw:
   # we need this volume since this SSL cert and key must be on the docker host file system
#volumes:
#     - "/opt/certs/:/opt/certs/"

